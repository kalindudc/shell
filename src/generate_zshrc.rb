#!/usr/bin/env ruby
# typed: strict
# frozen_string_literal: true

# This script generates a zshrc file with the necessary aliases and functions using the
# provided .zshrc.erb template file. The generated zshrc file is saved to the
# provided output file path or to the default path if not provided.
#
# The .zshrc.erb template file should contain the following ERB tags:
#   - <%= base %>
#   - <%= aliases %>
#   - <%= git %>
#   - <%= functions %>
#   - <%= kubernetes %>
#
# Usage: generate_zshrc [options]
#     -o, --output=OUTPUT_PATH         .zshrc output file path. Default path: ../home/.zshrc
#     -i, --input=INPUT_TEMPLATE       .zshrc.erb input template. Default path: ../src/templates/.zshrc.erb
#         --debug                      enable debug mode
#         --print                      output generated .zshrc to STDOUT
#

require 'erb'
require "optparse"
require 'logger'

DEFAULT_OUTPUT_PATH = "#{File.expand_path("..", File.dirname(__FILE__))}/home/.zshrc"
DEFAULT_ZSHRC_TEMPLATE_PATH = "#{File.expand_path(".", File.dirname(__FILE__))}/templates/.zshrc.erb"

BASE_TEMPLATE = "#{File.expand_path(".", File.dirname(__FILE__))}/templates/base.sh.erb"
ALIASES_TEMPLATE = "#{File.expand_path(".", File.dirname(__FILE__))}/templates/aliases.sh.erb"
GIT_TEMPLATE = "#{File.expand_path(".", File.dirname(__FILE__))}/templates/git.sh.erb"
FUNCTIONS_TEMPLATE = "#{File.expand_path(".", File.dirname(__FILE__))}/templates/functions.sh.erb"
KUBERNETES_TEMPLATE = "#{File.expand_path(".", File.dirname(__FILE__))}/templates/kubernetes.sh.erb"

def init
  @options = {
    output: DEFAULT_OUTPUT_PATH,
    zshrc_template: DEFAULT_ZSHRC_TEMPLATE_PATH,
    debug: false,
    print_output: false,
  }

  OptionParser.new do |opt|
    opt.on('-oOUTPUT_PATH', '--output=OUTPUT_PATH', ".zshrc output file path. Default path: #{DEFAULT_OUTPUT_PATH}") { |o| @options[:output] = o }
    opt.on('-iINPUT_TEMPLATE', '--input=INPUT_TEMPLATE', ".zshrc.erb input template. Default path: #{DEFAULT_ZSHRC_TEMPLATE_PATH}") { |o| @options[:zshrc_template] = o }
    opt.on('--debug', 'enable debug mode') { |o| @options[:debug] = true }
    opt.on('--print', 'output generated .zshrc to STDOUT') { |o| @options[:print_output] = true }
  end.parse!

  # Verify the .zshrc.erb template file exists
  if !File.file?(@options[:zshrc_template])
    raise "Error: .zshrc.erb template file not found at #{@options[:zshrc_template]}"
  end

  # Verify the output file path is writable
  if !File.writable?(@options[:output])
    raise "Error: Output file path #{@options[:output]} is not writable"
  end

  @logger = Logger.new(STDOUT)
  if (@options[:debug])
    @logger.level = Logger::DEBUG
  else
    @logger.level = Logger::INFO
  end
  @logger.info("Using options #{@options.to_s}")
end

def main
  init

  @logger.info("Rendering template #{BASE_TEMPLATE}")
  base_template_contents = render_template(BASE_TEMPLATE)

  @logger.info("Rendering template #{ALIASES_TEMPLATE}")
  aliases_template_contents = render_template(ALIASES_TEMPLATE)

  @logger.info("Rendering template #{GIT_TEMPLATE}")
  git_template_contents = render_template(GIT_TEMPLATE)

  @logger.info("Rendering template #{FUNCTIONS_TEMPLATE}")
  functions_template_contents = render_template(FUNCTIONS_TEMPLATE)

  @logger.info("Rendering template #{KUBERNETES_TEMPLATE}")
  kubernetes_template_contents = render_template(KUBERNETES_TEMPLATE)

  misc_template_contents = <<EOF
if [[ "$(uname)" == "Linux" ]]; then
  # Use xclip to copy/paste to clipboard
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
fi
EOF

  @logger.info("Rendering template #{@options[:zshrc_template]}")

  zshrc_template = File.read(@options[:zshrc_template])
  zshrc_erb = ERB.new(zshrc_template, trim_mode: '-')
  zshrc = zshrc_erb.result(binding)

  prefix = "# THIS FILE IS AUTO-GENERATED. DO NOT EDIT THIS FILE DIRECTLY.\n\n"
  zshrc_contents = prefix + zshrc

  if @options[:print_output]
    print "\n========================================\n\n"
    puts zshrc_contents
    print "\n========================================\n"
  else
    File.write(@options[:output], zshrc_contents)
    @logger.info("Generated .zshrc file saved to #{@options[:output]}")
  end
end

private

def render_template(file_path)
  template = File.read(file_path)
  ERB.new(template, trim_mode: '-').result(binding)
end

main
