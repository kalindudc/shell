KUBERNETES_SCRIPT="yes"

export KUBE_EDITOR="nvim"

compdef kubecolor=kubectl
alias kubectl=kubecolor

alias k='kubectl'
alias kcl='kubectl'
alias kngx='kubectl ingress-nginx --deployment nginx-ingress-controller'
alias kevents="kubectl get events --sort-by='.lastTimestamp'"
alias kgc="kubectl config get-contexts -o name | fzf --exact -m --height=40% | tr -d '\n' | pbcopy; pbpaste; echo ''"
alias kclgc="kubectl config get-contexts -o name | fzf --exact -m --height=40% | tr -d '\n' | pbcopy; pbpaste; echo ''"
alias klog="stern $@"
alias kcls="kubectl config get-contexts -o name | grep -e "

kdebug() {
  cluster=$1
  if [[ -z "$cluster" ]] then
    cluster=$(kubectl config get-contexts -o name | fzf)
    if [[ -z "$cluster" ]] then
      echo "Please select a valid cluster"
      return -1
    fi
  fi

  namespace=$2
  if [[ -z $namespace ]] then
    namespace=$(kubectl --context $cluster get ns -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | fzf)
    if [[ -z "$namespace" ]] then
      echo "Please select a valid namespace"
      return -1
    fi
  fi

  echo "Using $cluster and $namespace for a debug pod"

  image_to_use="gcr.io/shopify-docker-images/cloud/debug-container"
  fallback_image="docker.io/nicolaka/netshoot"

  kubectl --context "$cluster" -n "$namespace" delete pod "$USER-test" --ignore-not-found

  if ! kubectl --context "$cluster" -n "$namespace" run -ti --rm $USER-test --image "$image_to_use" -- bash; then
    echo "Falling back to $fallback_image"
    kubectl --context "$cluster" -n "$namespace" run -ti --rm $USER-test --image "$fallback_image" -- bash
  fi
}

kcerts() {
  cluster=$1
  if [[ -z "$cluster" ]] then
    cluster=$(kubectl config get-contexts -o name | fzf)
    if [[ -z "$cluster" ]] then
      echo "Please select a valid cluster"
      return -1
    fi
  fi

  namespace=$2
  if [[ -z $namespace ]] then
    namespace=$(kubectl --context $cluster get ns -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | fzf)
    if [[ -z "$namespace" ]] then
      echo "Please select a valid namespace"
      return -1
    fi
  fi

  secret=$3
  if [[ -z $secret ]] then
    secret=$(kubectl --context $cluster -n $namespace get secrets -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | fzf)
    if [[ -z "$secret" ]] then
      echo "Please select a valid secret"
      return -1
    fi
  fi

  echo "Using $cluster, $namespace and $secret"
  kubectl --context $cluster --namespace $namespace get secrets $secret -o json | jq -r '.data["tls.crt"]' | base64 --decode | openssl x509 -noout -text
}

kclcn() {
  context=$1
  shift
  namespace=$1
  shift
  kubectl --namespace $namespace --context $context $@

}

kcla() {
  kubectl $@ -A
}

kexec() {
  cluster=$1
  if [[ -z "$cluster" ]] then
    cluster=$(kubectl config get-contexts -o name | fzf)
    if [[ -z "$cluster" ]] then
      echo "Please select a valid cluster"
      return -1
    fi
  fi

  namespace=$2
  if [[ -z $namespace ]] then
    namespace=$(kubectl --context $cluster get ns -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | fzf)
    if [[ -z "$namespace" ]] then
      echo "Please select a valid namespace"
      return -1
    fi
  fi

  deploy=$3
  if [[ -z $deploy ]] then
    deploy=$(kubectl --context $cluster -n $namespace get deploy -o name | fzf)
    if [[ -z "$namespace" ]] then
      echo "Please select a valid namespace"
      return -1
    fi
  fi

  echo "Using $cluster, $namespace and $deploy for exec"
  kubectl --context $cluster -n $namespace exec -it $deploy -- bash
}
