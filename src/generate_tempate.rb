#!/usr/bin/env ruby
# typed: strict
# frozen_string_literal: true

# This script generates a erb template
#
#
# Usage: generate_zshrc [options]
#     -o, --output=OUTPUT_PATH         .zshrc output file path. Default path: ../home/.zshrc
#     -i, --input=INPUT_TEMPLATE       .zshrc.erb input template. Default path: ../src/templates/.zshrc.erb
#         --debug                      enable debug mode
#         --print                      output generated .zshrc to STDOUT
#

require 'erb'
require "optparse"
require 'logger'

def init
  @options = {output: nil, template: nil, debug: false, print_output: false}
  OptionParser.new do |opt|
    opt.on('-oOUTPUT_PATH', '--output=OUTPUT_PATH', "template output file path") { |o| @options[:output] = o }
    opt.on('-iINPUT_TEMPLATE', '--input=INPUT_TEMPLATE', "TEMPLATE.erb input template") { |o| @options[:template] = o }
    opt.on('--debug', 'enable debug mode') { |o| @options[:debug] = true }
    opt.on('--print', 'output generated .zshrc to STDOUT') { |o| @options[:print_output] = true }
  end.parse!

  # Verify the template file exists
  if @options[:template].nil? or !File.file?(@options[:template])
    raise "Error: .zshrc.erb template file not found at #{@options[:template]}"
  end

  # Verify the output file path is writable
  if !@options[:print_output] and (@options[:output].nil? or !File.directory?(File.dirname(@options[:output])))
    raise "Error: Output file path #{@options[:output]} is not writable"
  end

  @logger = Logger.new(STDOUT)
  if (@options[:debug])
    @logger.level = Logger::DEBUG
  else
    @logger.level = Logger::INFO
  end
  @logger.info("Using options #{@options.to_s}")
end

def main
  init

  @logger.info("Rendering template #{@options[:template]}")

  template = File.read(@options[:template])
  template_erb = ERB.new(template, trim_mode: '-')
  contents = template_erb.result(binding)

  prefix = "# THIS FILE IS AUTO-GENERATED. DO NOT EDIT THIS FILE DIRECTLY.\n\n"
  contents = prefix + contents

  if @options[:print_output]
    print "\n========================================\n\n"
    puts contents
    print "\n========================================\n"
  else
    File.write(@options[:output], contents)
    @logger.info("Generated template file saved to #{@options[:output]}")
  end
end

private

main
