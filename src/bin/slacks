#!/bin/bash

# get the full path of the current directory
CURRENT_DIR="$(
  cd -- "$(dirname "$0")" >/dev/null 2>&1
  pwd -P
)"

SLACK_API_URL="https://slack.com/api/users.profile.set"
[[ $SLACK_STATUS_JSON_LOC ]] && SLACK_STATUS_LOC=$SLACK_STATUS_JSON_LOC || SLACK_STATUS_LOC=$CURRENT_DIR/conf/slack_status.json

log="false"

help() {
  printf "slacks - command line helper for slack\n"
  printf "\nusage: \tslacks [options]"
  printf "\nslack is a tool for processing basic commands for slack. \n\tCurrently, only status changes are supported.\n"
  printf "\nSet the following env variables prior to using slack:\n\tSLACK_TOKEN = <user token with users.profile:write scope>\n"
  printf "\tSLACK_STATUS_JSON_LOC = <location of json file appropriate slack status information>\n"
  printf "\nAlternatively, see src/bin/conf/.env.template and src/bin/cong/slack_status.json\n"
  printf "ex: slacks [custom,c] <status message> <status emoji> <duration in seconds>\n"
  printf "\nRunning 'slacks' without any options will clear the current slack status\n\n"
  printf "\nTo schedule a slack status use the option [-s] followed by the time and date\n"
  printf "ex: slacks -s \"9:00am July 30 2021\" custom \"Out of the office\" :vacation: 432000\n"

  if [[ ! -f $SLACK_STATUS_LOC ]]; then
    printf "\nCurrent json file location is INVALID.\n"
  fi

  if [[ -f $SLACK_STATUS_LOC ]]; then
    printf "\nCurrent json file location: \n\tSLACK_STATUS_JSON_LOC=$SLACK_STATUS_LOC\n"
    printf "\nAvialable options: $keys\n"
    printf "ex: slacks <option> <duration?>\n"
    printf "    slacks <option> <custom message?> <duration?>\n"
  fi

}

# help output
if [[ $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
  if [[ -f $SLACK_STATUS_LOC ]]; then
    keys=$(jq keys -c -C $SLACK_STATUS_LOC)
  fi
  help
  exit 0
fi

if [[ $1 == "-hv" || $1 == "--help-verbose" ]]; then
  if [[ -f $SLACK_STATUS_LOC ]]; then
    keys=$(jq '.' -C $SLACK_STATUS_LOC)
  fi
  help
  exit 0
fi

# set all necessary env variables
[[ -f $CURRENT_DIR/conf/.env ]] && source $CURRENT_DIR/conf/.env

if [[ -z "$SLACK_TOKEN" ]]; then
  printf "SLACK_TOKEN is empty\n\n"
  help
  exit 0
fi

if [[ $1 == "-s" ]]; then
  if [[ $# -le 1 ]]; then
    printf "Invalid use of , slack -s\n"
    help
    exit -1
  fi

  schedule=$2

  shift
  shift

  job="export PATH=$CURRENT_DIR:$PATH && export SLACK_STATUS_LOC=$SLACK_STATUS_LOC && slack $@ > /tmp/slack.log"
  at $schedule <<< "$job"
  printf "slack status scheduled for $schedule with 'slack $@'\n"
  exit 0
fi

declare -i duration
declare -i total_duration

message="\"\""
emoji="\"\""
duration=0

[[ $log == "true" ]] && printf "slack: working ...\n\n"

if [[ $1 == "custom" || $1 == "c" ]]; then
  if [[ $# -ge 4 ]]; then
    message="\"$2\""
    emoji="\"$3\""
    duration=$4
  else
    printf "Invalid use of, slack custom\n\n"
    printf "slack custom <status message> <status emoji> <duration in seconds>\n"
    exit -1
  fi
elif [[ $# -gt 0 && -e $SLACK_STATUS_LOC ]]; then

  [[ $log == "true" ]] && printf "Using status JSON file: $SLACK_STATUS_LOC\n"
  [[ $log == "true" ]] && printf "Using status $1\n\n"

  data=$(jq .$1 $SLACK_STATUS_LOC 2>/dev/null)
  if [[ $data != "null" && $data != "" ]]; then
    message=$(jq ".$1.msg" $SLACK_STATUS_LOC 2>/dev/null)
    emoji=$(jq .$1.emoji $SLACK_STATUS_LOC 2>/dev/null)
    duration=$(jq .$1.dur $SLACK_STATUS_LOC 2>/dev/null)

    if [[ $3 ]]; then
      message="\"$2\""
      duration=$3
    elif [[ $2 ]]; then
      duration=$2
    fi
  else
    printf "Invalid slack status command: $1\n"
    keys=$(jq keys -c -C $SLACK_STATUS_LOC)
    printf "\nAvialable options: $keys\n"
    exit -1
  fi
fi

[[ $log == "true" ]] && printf "using parameters: \n\n{\n\n  \"msg\":$message,\n\n  \"emoji\":$emoji,\n\n  \"dur\":$duration\n\n}\n\n"

total_duration=$(date -v +"$duration"S +%s)
json_data="{\"profile\":{\"status_text\":$message,\"status_emoji\": $emoji,\"status_expiration\": \"$total_duration\"}}"

res=$(curl -s \
  -H "Authorization: Bearer $SLACK_TOKEN" \
  -H "Content-type: application/json; charset=utf-8" \
  -d "$json_data" \
  $SLACK_API_URL)

if printf "$res" | grep -q "\"ok\":true"; then
  printf "Status Updated with $message and $emoji for $duration seconds.\n"
else
  printf "Could not set status: ERROR\n\n"
  printf "Tried to set: {$message, $emoji, $total_duration}\n"
  printf "JSON Data: $json_data\n"
  printf "\n$res\n\n"
fi
